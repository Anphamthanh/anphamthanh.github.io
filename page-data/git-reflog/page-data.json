{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/git-reflog/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Note","social":[{"name":"GitHub","url":"https://gitlab.com/Anphamthanh"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"17bf1bf2-eca9-5401-b82c-c1d035c87196","excerpt":"Git is now a ubiquitous skill to any software engineer. To a newbie, Git flow is full of new trickeries, concepts, and gotchas. Fear not…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A Life-Saver Git Command\",\n  \"date\": \"2020-02-01T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Git is now a ubiquitous skill to any software engineer. To a newbie, Git flow is full of new trickeries, concepts, and gotchas. Fear not, you don\\u2019t have to be a Git guru to tame Git to your workflow. My advice to move fast is NOT spending too much time to be a Git expert, but instead, read the git manual to understand the fundamentals so you can get the job done, and occasionally, get yourself out of troubles. Today, I am in big trouble.\"), mdx(\"h4\", {\n    \"id\": \"the-setup\"\n  }, \"The setup\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"My repo has a branch named\\xA0\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"develop\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"My repo ALSO has a dir name\\xA0\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"deployment\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I am working on a branch named\\xA0\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"release-X\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On my local, I had some commits that I \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"haven\\u2019t\"), \" pushed to Git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I staged all the latest changes in the current repo, ready to commit\")), mdx(\"h4\", {\n    \"id\": \"the-disaster\"\n  }, \"The disaster\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"I noticed that I don\\u2019t want to include changes in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"deployment\"), \" dir, so I\\u2019d like to run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git reset deployment\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"But instead, I typed, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git reset de<Tab><Enter>\"), \", my fingers were too fast to handle\\xA0\\uD83D\\uDE2D\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The command above auto-completed into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git reset develop\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This moved my HEAD to my local develop branch\\xA0\\u2192 I \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"can\\u2019t\"), \" get back to the tip of my local branch\\xA0\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"release-X\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"To get back to where I was on my local branch\\xA0\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"release-X\")), \", I need to know its commit hash which I don\\u2019t\")), mdx(\"h4\", {\n    \"id\": \"the-rescue\"\n  }, \"The rescue\"), mdx(\"p\", null, \"Luckily,\\xA0Git keeps a log of all ref updates, so to get the commit hashes,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git reflog\\n\")), mdx(\"p\", null, \"This will output something like,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"39ab761 HEAD@{0}: reset: moving to HEAD~1\\nb55c098 HEAD@{1}: A very interesting commit...\\n...\\n\")), mdx(\"p\", null, \"Now I can simply scan the log to find the commit hash that I want to return to, and once I find it, simply run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git reset <hash>\\n\")), mdx(\"p\", null, \"And voila!, I am back with no commit lost, and all the local changes are ready to be committed again \\uD83E\\uDD70. This is a simple command, but if you don\\u2019t know it, you will likely develop heart-related issues if you also have fast fingers like mine.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/git-reflog/","title":"A Life-Saver Git Command","tags":[],"keywords":[],"date":"February 01, 2020"},"previous":{"__typename":"MdxBlogPost","id":"e40a50f2-fb30-56fb-a2a3-5996d6130d86","excerpt":"For a software engineer, sequence diagrams come up as a  boring  technology. This is partly because sequence diagrams were sometimes the…","slug":"/sequence-diagram/","title":"10x Engineer - A Tale of Sequence Diagrams","date":"January 01, 2020"},"next":null},"pageContext":{"id":"17bf1bf2-eca9-5401-b82c-c1d035c87196","previousId":"e40a50f2-fb30-56fb-a2a3-5996d6130d86"}}}